#test data
#data = [1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,19,1,9,19,23,1,23,5,27,2,27,10,31,1,6,31,35,1,6,35,39,2,9,39,43,1,6,43,47,1,47,5,51,1,51,13,55,1,55,13,59,1,59,5,63,2,63,6,67,1,5,67,71,1,71,13,75,1,10,75,79,2,79,6,83,2,9,83,87,1,5,87,91,1,91,5,95,2,9,95,99,1,6,99,103,1,9,103,107,2,9,107,111,1,111,6,115,2,9,115,119,1,119,6,123,1,123,9,127,2,127,13,131,1,131,9,135,1,10,135,139,2,139,10,143,1,143,5,147,2,147,6,151,1,151,5,155,1,2,155,159,1,6,159,0,99,2,0,14,0]
#data = [1,1,1,4,99,5,6,0,99]
#data= [1101,100,-1,4,0]
#data = [3,3,1105,-1,9,1101,0,0,12,4,12,99,1]

#real data
data = [3,225,1,225,6,6,1100,1,238,225,104,0,1,191,196,224,1001,224,-85,224,4,224,1002,223,8,223,1001,224,4,224,1,223,224,223,1101,45,50,225,1102,61,82,225,101,44,39,224,101,-105,224,224,4,224,102,8,223,223,101,5,224,224,1,224,223,223,102,14,187,224,101,-784,224,224,4,224,102,8,223,223,101,7,224,224,1,224,223,223,1001,184,31,224,1001,224,-118,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,91,18,225,2,35,110,224,101,-810,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,76,71,224,1001,224,-147,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1101,7,16,225,1102,71,76,224,101,-5396,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1101,72,87,225,1101,56,77,225,1102,70,31,225,1102,29,15,225,1002,158,14,224,1001,224,-224,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,226,226,224,1002,223,2,223,1006,224,329,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,344,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,359,1001,223,1,223,8,677,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1108,226,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,7,677,226,224,1002,223,2,223,1005,224,404,101,1,223,223,7,226,226,224,102,2,223,223,1006,224,419,1001,223,1,223,1108,226,677,224,102,2,223,223,1005,224,434,1001,223,1,223,1107,226,226,224,1002,223,2,223,1006,224,449,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,464,1001,223,1,223,107,226,226,224,1002,223,2,223,1005,224,479,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,494,1001,223,1,223,1008,677,677,224,102,2,223,223,1005,224,509,101,1,223,223,107,677,677,224,102,2,223,223,1005,224,524,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,539,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,554,1001,223,1,223,8,677,226,224,1002,223,2,223,1006,224,569,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,599,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,614,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,629,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,1008,226,677,224,1002,223,2,223,1005,224,659,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226]


mode = {
0:lambda a,b: a[a[b]],
1:lambda a,b: a[b]
}

def add(mem, instruction, pointer):
    pos = pointer[0]
    m1,m2,m3= [int(c) for c in instruction[-3::-1]]
    pos1 = mode[m1](mem,pos+1)
    pos2 = mode[m2](mem,pos+2)
    pos3 = mode[1](mem,pos+3)
    #print(m1,m2,m3, pos1,pos2,pos3)
    
    mem[pos3] = pos1 + pos2
    pointer[0] += 4

def multiply(mem, instruction, pointer):
    pos = pointer[0]
    m1,m2,m3= [int(c) for c in instruction[-3::-1]]
    pos1 = mode[m1](mem,pos+1)
    pos2 = mode[m2](mem,pos+2)
    pos3 = mode[1](mem,pos+3)
    #print(pos1,pos2,pos3)

    mem[pos3] = pos1 * pos2
    pointer[0] += 4

def read(mem, instruction, pointer):
    print("reading value...")
    val = 1
    val = int(input("Input value manually:"))
    mem[mem[pointer[0]+1]] = val
    pointer[0] += 2

def output(mem, instruction, pointer):
    m1,m2,m3= [int(c) for c in instruction[-3::-1]]
    print(mode[m1](mem,pointer[0]+1))
    pointer[0] += 2

def jit(mem, instruction, pointer):
    pos = pointer[0]
    m1,m2,m3= [int(c) for c in instruction[-3::-1]]
    pos1 = mode[m1](mem,pos+1)
    pos2 = mode[m2](mem,pos+2)

    if pos1 != 0:
        pointer[0] = pos2
    else:
        pointer[0] += 3

def jif(mem, instruction, pointer):
    pos = pointer[0]
    m1,m2,m3= [int(c) for c in instruction[-3::-1]]
    pos1 = mode[m1](mem,pos+1)
    pos2 = mode[m2](mem,pos+2)

    if pos1 == 0:
        pointer[0] = pos2
    else:
        pointer[0] += 3

def lt(mem, instruction, pointer):
    pos = pointer[0]
    m1,m2,m3= [int(c) for c in instruction[-3::-1]]
    pos1 = mode[m1](mem,pos+1)
    pos2 = mode[m2](mem,pos+2)
    pos3 = mode[1](mem,pos+3)

    if pos1<pos2:
        mem[pos3] = 1
    else:
        mem[pos3] = 0
        
    pointer[0] += 4

def eq(mem, instruction, pointer):
    pos = pointer[0]
    m1,m2,m3= [int(c) for c in instruction[-3::-1]]
    pos1 = mode[m1](mem,pos+1)
    pos2 = mode[m2](mem,pos+2)
    pos3 = mode[1](mem,pos+3)

    if pos1==pos2:
        mem[pos3] = 1
    else:
        mem[pos3] = 0
        
    pointer[0] += 4

opcodes = {
1:add,
2:multiply,
3:read,
4:output,
5:jit,
6:jif,
7:lt,
8:eq
}
pointer = [0]

def run(program):
    while(program[pointer[0]] != 99):
        instruction = str(program[pointer[0]]).rjust(5,"0")
        opcode = int(instruction[-2:])
        #print(instruction)
        opcodes[opcode](program,instruction, pointer)
    return program[0]


run(data)

